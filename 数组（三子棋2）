game.h
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#define ROW 3
#define COL 3
void  DisplaBoard(char board[ROW][COL],int row,int col );
void InitBoard(char board[ROW][COL],int row,int col);

game.c
#define _CRT_SECURE_NO_WARNINGS
#include"game.h"
void  InitBoard(char board[ROW][COL],int row,int col )
{
int i=0;
int j=0;
for(i=0;i<row;i++)
{
	for (j=0;j<col;j++)
	{
		board[i][j]=' ';
	}
}
}
void  DisplaBoard(char board[ROW][COL],int row,int col )
{
	int i=0;
	for (i=0;i<row;i++)
	{
		//第一种
	    ////1.打印一行的数据
		////printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);//该处代码有一个很大的缺点,锁死了列数
		////2.打印分割行
		//	if (i<row-1)
		//printf("---|---|---\n");//最后的分割行不打印
		
		//	第二种
			int j=0;
		for(j=0;j<col;j++)
		{
			printf(" %c ",board[i][j]);
			if(j<col-1)
				printf("|");
		}
		printf("\n");
		//2.打印分割行
		if (i<row-1)
		{
		 int j=0;
		 for(j=0;j<row;j++)
			 {
				 printf("---");
			     if(j<col-1)
			     printf("|");
		     }
		printf("\n");
	    }
	}
}

test.c
#define _CRT_SECURE_NO_WARNINGS
#include"game.h"
 void menu()
 {
	 printf("****************************\n");
	 printf("**** 1. play     0. exit****\n");
	 printf("****************************\n");
 }
 //游戏整个的算法实现
 void game()
 {
	 //数组，存放走出的棋盘信息
	 char board[ROW][COL]={0};//全变空格
	 InitBoard(board,ROW,COL);//初始化棋盘
	 DisplaBoard(board,ROW,COL);//打印棋盘
 }
void test()
{
	int input=0;
	do
	{
		menu();
		printf("请选择：》");
		scanf("%d",&input);
		switch(input)
		{
		case 1:
			printf("进入游戏ing···\n");
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误。请重新选择！\n");
			break;
		}
		
	}
	while(input);
}
int main()
{
	test();
	return 0;
}
